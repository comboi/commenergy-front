/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/data-sources/types": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get available data source types
         * @description Retrieves all available data source types with their basic information
         */
        get: operations["DataSourcesController_getDataSourceTypes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/data-sources/configurations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all data source configurations
         * @description Retrieves detailed configuration requirements for all data source types
         */
        get: operations["DataSourcesController_getAllConfigurations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/data-sources/configurations/{type}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get configuration for a specific data source type
         * @description Retrieves detailed configuration requirements for a specific data source type
         */
        get: operations["DataSourcesController_getConfigurationByType"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/data-sources": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a new data source
         * @description Creates a new data source for a specific contract
         */
        post: operations["DataSourcesController_createDataSource"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/data-sources/contract/{contractId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all data sources for a contract
         * @description Retrieves all data sources associated with a specific contract
         */
        get: operations["DataSourcesController_getDataSourcesByContract"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/data-sources/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a data source by ID
         * @description Retrieves a specific data source by its ID
         */
        get: operations["DataSourcesController_getDataSourceById"];
        /**
         * Update a data source
         * @description Updates an existing data source with new information
         */
        put: operations["DataSourcesController_updateDataSource"];
        post?: never;
        /**
         * Delete a data source
         * @description Deletes a data source by its ID
         */
        delete: operations["DataSourcesController_deleteDataSource"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/documents/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Uploads a single file */
        post: operations["DocumentsController_createDocument"];
        delete: operations["DocumentsController_deleteDocument"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/terms-agreements": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["TermsAgreementsController_getAllTermsAgreements"];
        put?: never;
        post: operations["TermsAgreementsController_createTermsAgreement"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/terms-agreements/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["TermsAgreementsController_getTermsAgreementById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/terms-agreements/community-contract/{communityContractId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["TermsAgreementsController_getTermsAgreementByCommunityContractId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["HealthController_run"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["UsersController_getUsers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["UsersController_register"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/register-pending": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["UsersController_registerPending"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/vat/{vat}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["UsersController_getUserByVat"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["UsersController_me"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AuthController_run"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/password-reset/request": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AuthController_requestPasswordReset"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/password-reset/confirm": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AuthController_confirmPasswordReset"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/test-email": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AuthController_testEmail"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/contract-users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all contract user relationships */
        get: operations["ContractUsersController_getContractUsers"];
        put?: never;
        /** Create a new contract user relationship */
        post: operations["ContractUsersController_createContractUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/contract-users/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get contract user relationship by ID */
        get: operations["ContractUsersController_getContractUserById"];
        put?: never;
        post?: never;
        /** Delete contract user relationship */
        delete: operations["ContractUsersController_deleteContractUser"];
        options?: never;
        head?: never;
        /** Update contract user relationship */
        patch: operations["ContractUsersController_updateContractUser"];
        trace?: never;
    };
    "/contract-users/contract/{contractId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all users for a specific contract */
        get: operations["ContractUsersController_getContractUsersByContractId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/contract-users/user/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all contracts for a specific user */
        get: operations["ContractUsersController_getContractUsersByUserId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/energy-providers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["EnergyProviderController_getEnergyProvidersReq"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sharing-versions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["SharingVersionsController_createVersionBulk"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sharing-versions/{communityId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["SharingVersionsController_getVersionsByCommunityId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sharing-versions/{sharingVersionId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["SharingVersionsController_deleteSharingVersion"];
        options?: never;
        head?: never;
        patch: operations["SharingVersionsController_updateSharingVersion"];
        trace?: never;
    };
    "/sharing-versions/{sharingVersionId}/set-production": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["SharingVersionsController_setSharingVersionProduction"];
        trace?: never;
    };
    "/sharings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["SharingsController_createCommunityContract"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sharings/{communityContractId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["SharingsController_getSharingsById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sharings/{sharingId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["SharingsController_updateSharing"];
        trace?: never;
    };
    "/contracts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ContractsController_getContracts"];
        put?: never;
        post: operations["ContractsController_createContract"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/contracts/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ContractsController_getContract"];
        put?: never;
        post?: never;
        delete: operations["ContractsController_deleteContract"];
        options?: never;
        head?: never;
        patch: operations["ContractsController_updateContract"];
        trace?: never;
    };
    "/contracts/{id}/community-contracts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ContractsController_getCommunityContractsByContractId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/community-contracts/community/{communityId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["CommunityContractsController_getCommunityContracts"];
        put?: never;
        post: operations["CommunityContractsController_createCommunityContract"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/community-contracts/community/{communityId}/contract/{communityContractId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["CommunityContractsController_getCommunityContract"];
        put: operations["CommunityContractsController_updateContract"];
        post?: never;
        delete: operations["CommunityContractsController_deleteContract"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/community-contracts/community/{communityId}/contract/{communityContractId}/terms-agreement": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["CommunityContractsController_getTermsAgreementByCommunityContractId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/community-contracts/{communityContractId}/documents/{documentId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upload a document to a community
         * @description Uploads a single file and associates it with a specific communityContract and document ID
         */
        post: operations["CommunityContractDocumentsController_addDocumentToCommunityContract"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/community-contracts/{communityContractId}/documents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["CommunityContractDocumentsController_getCommunityContractDocuments"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/communities": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["CommunitiesController_getUsersCommunities"];
        put: operations["CommunitiesController_updateCommunity"];
        post: operations["CommunitiesController_createCommunity"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/communities/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["CommunitiesController_getCommunity"];
        put?: never;
        post?: never;
        delete: operations["CommunitiesController_deleteCommunity"];
        options?: never;
        head?: never;
        patch: operations["CommunitiesController_patchCommunity"];
        trace?: never;
    };
    "/communities/{id}/user-request": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["CommunitiesRequestsController_getUserRequests"];
        put?: never;
        post: operations["CommunitiesRequestsController_createUserRequestCommunity"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/communities/{id}/user-request/{userId}/accept": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["CommunitiesRequestsController_acceptUserRequest"];
        trace?: never;
    };
    "/communities/{id}/contract-request": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["CommunitiesRequestsController_getContractRequests"];
        put?: never;
        post: operations["CommunitiesRequestsController_requestToAddContractToCommunity"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/communities/{communityId}/contract-request/{contractId}/accept": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["CommunitiesRequestsController_AcceptRequestContractToCommunity"];
        trace?: never;
    };
    "/communities/{communityId}/documents/{documentId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upload a document to a community
         * @description Uploads a single file and associates it with a specific community and document ID
         */
        post: operations["CommunitiesDocumentsController_addDocumentToCommunity"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/communities/{id}/documents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get community documents
         * @description Retrieves all documents associated with a specific community
         */
        get: operations["CommunitiesDocumentsController_getCommunityDocuments"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/communities/{id}/documents/{documentId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete a community document
         * @description Deletes a specific document from a community
         */
        delete: operations["CommunitiesDocumentsController_deleteCommunityDocument"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/communities/{id}/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get community users
         * @description Retrieves all users associated with a specific community
         */
        get: operations["CommunitiesUsersController_getCommunityUsers"];
        put?: never;
        /**
         * Add new user to community
         * @description Creates and adds a new user to a specific community
         */
        post: operations["CommunitiesUsersController_createNewUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/communities/{id}/users/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update community user role
         * @description Updates the role of a specific user in a community
         */
        put: operations["CommunitiesUsersController_updateUser"];
        post?: never;
        /**
         * Remove user from community
         * @description Removes a specific user from a community
         */
        delete: operations["CommunitiesUsersController_deleteUserFromCommunity"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bulk-imports/{communityId}/process": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Process bulk import CSV file
         * @description Uploads a CSV file and processes it to create users, contracts, and relationships in bulk
         */
        post: operations["BulkImportsController_processBulkImport"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bulk-imports/template": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Download CSV template
         * @description Downloads a CSV template file with example data for bulk imports
         */
        get: operations["BulkImportsController_downloadTemplate"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bulk-imports/template/documented": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["BulkImportsController_downloadDocumentedTemplate"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bulk-imports/template/minimal": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["BulkImportsController_downloadMinimalTemplate"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bulk-imports/template/with-descriptions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["BulkImportsController_downloadTemplateWithDescriptions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bulk-imports/history/{communityId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get bulk import history
         * @description Retrieves the history of bulk imports for a specific community
         */
        get: operations["BulkImportsController_getImportHistory"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        CreateDataSourceDto: {
            /**
             * @description The contract ID this data source belongs to
             * @example 507f1f77bcf86cd799439011
             */
            contractId: string;
            /**
             * @description Name of the data source
             * @example Smart Meter #001
             */
            name: string;
            /**
             * @description Type of the data source
             * @example SHELLY_CLOUD
             * @enum {string}
             */
            type: "DATA_DIS" | "SHELLY_CLOUD";
            /**
             * @description Description of the data source
             * @example Main electricity meter for building A
             */
            description?: string;
            /**
             * @description Configuration object for the data source
             * @example {
             *       "endpoint": "https://api.meter.com/data",
             *       "apiKey": "secret",
             *       "deviceId": "device123",
             *       "deviceHost": "shelly-cloud.com"
             *     }
             */
            configuration?: Record<string, never>;
        };
        DataSourceResponseDto: {
            /**
             * @description Unique identifier of the data source
             * @example 507f1f77bcf86cd799439011
             */
            id: string;
            /**
             * @description The contract ID this data source belongs to
             * @example 507f1f77bcf86cd799439011
             */
            contractId: string;
            /**
             * @description Name of the data source
             * @example Smart Meter #001
             */
            name: string;
            /**
             * @description Type of the data source
             * @example smart_meter
             */
            type: string;
            /**
             * @description Description of the data source
             * @example Main electricity meter for building A
             */
            description?: string;
            /**
             * @description Configuration object for the data source
             * @example {
             *       "endpoint": "https://api.meter.com/data",
             *       "deviceId": "device123",
             *       "deviceHost": "shelly-cloud.com"
             *     }
             */
            configuration?: Record<string, never>;
            /**
             * Format: date-time
             * @description Creation timestamp
             * @example 2025-07-23T10:30:00Z
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description Last update timestamp
             * @example 2025-07-23T11:45:00Z
             */
            updatedAt: string;
        };
        UpdateDataSourceDto: {
            /**
             * @description The contract ID this data source belongs to
             * @example 507f1f77bcf86cd799439011
             */
            contractId?: string;
            /**
             * @description Name of the data source
             * @example Smart Meter #001 Updated
             */
            name?: string;
            /**
             * @description Type of the data source
             * @example SHELLY_CLOUD
             * @enum {string}
             */
            type?: "DATA_DIS" | "SHELLY_CLOUD";
            /**
             * @description Description of the data source
             * @example Updated description for the meter
             */
            description?: string;
            /**
             * @description Configuration object for the data source
             * @example {
             *       "endpoint": "https://api.meter.com/v2/data",
             *       "apiKey": "new-secret",
             *       "deviceId": "device456",
             *       "deviceHost": "updated-host.com"
             *     }
             */
            configuration?: Record<string, never>;
            /**
             * @description Device ID for hardware data sources
             * @example device123
             */
            deviceId?: string;
            /**
             * @description Device host for hardware data sources
             * @example shelly-cloud.com
             */
            deviceHost?: string;
        };
        Document: {
            /** @example document.pdf */
            name: string;
            /** @example 123e4567-e89b-12d3-a456-426614174000 */
            id: string;
            /** @example https://example.com/document.pdf */
            url: string;
            /** @example media123 */
            mediaId: string;
            /** @example 2025-06-11T10:30:00.000Z */
            createdAt: string;
            /**
             * @example COMMUNITY_DOCUMENT
             * @enum {string}
             */
            documentType: "COMMUNITY_MODEL" | "COMMUNITY_DOCUMENT" | "CONTRACT_DOCUMENT";
            /** @example This is a detailed description of the document */
            longDescription?: string;
            /** @example 123e4567-e89b-12d3-a456-426614174001 */
            relatedDocumentId?: string;
            /** @example 123e4567-e89b-12d3-a456-426614174002 */
            communityId?: string;
            /** @example 123e4567-e89b-12d3-a456-426614174003 */
            communityContractId?: string;
            /** @example 123e4567-e89b-12d3-a456-426614174004 */
            termsAgreementId?: string;
        };
        TermsAgreementDto: {
            /** @example 550e8400-e29b-41d4-a716-446655440000 */
            id: string;
            /** @example [
             *       "550e8400-e29b-41d4-a716-446655440000"
             *     ] */
            documents: string[];
            /** @example 2012-07-14T01:00:00+01:00 */
            acceptanceDate: string;
            /** @example 550e8400-e29b-41d4-a716-446655440000 */
            userId: string;
            /** @example 550e8400-e29b-41d4-a716-446655440000 */
            communityContractId: string;
            /** @example 550e8400-e29b-41d4-a716-446655440000 */
            userVat: string;
        };
        CreateUserDto: {
            /**
             * Format: uuid
             * @example c6cd7b7a-f7a2-4e38-8e06-27649a84c727
             */
            id: string;
            /** @example johndoe@email.com */
            email: string;
            /** @example 7311413M */
            vat: string;
            /** @example 666666666 */
            mobile: string;
            /** @example John Doe */
            name: string;
            /** @example mySecretPassword33 */
            password: string;
        };
        User: {
            /** @example 123e4567-e89b-12d3-a456-426614174000 */
            id: string;
            /** @example ES12345678A */
            vat: string;
            /** @example +34600123456 */
            mobile?: string | null;
            /** @example user@example.com */
            email?: string | null;
            /** @example John Doe */
            name?: string | null;
            /** @example password123 */
            password?: string | null;
            /**
             * @example ACTIVE
             * @enum {string}
             */
            status: "ACTIVE" | "INACTIVE" | "PENDING_TO_CLAIM";
        };
        CreatePendingUserDto: {
            /**
             * Format: uuid
             * @example c6cd7b7a-f7a2-4e38-8e06-27649a84c727
             */
            id: string;
            /** @example 7311413M */
            vat: string;
        };
        UserResponse: {
            /** @example 123e4567-e89b-12d3-a456-426614174000 */
            id: string;
            /** @example ES12345678A */
            vat: string;
            /** @example +34600123456 */
            mobile?: string | null;
            /** @example user@example.com */
            email?: string | null;
            /** @example John Doe */
            name?: string | null;
            /**
             * @example ACTIVE
             * @enum {string}
             */
            status: "ACTIVE" | "INACTIVE" | "PENDING_TO_CLAIM";
        };
        LoginDto: {
            /** @example johndoe@email.com */
            email: string;
            /** @example password */
            password: string;
        };
        CreateContractUserDto: {
            /** @example 123e4567-e89b-12d3-a456-426614174000 */
            id: string;
            /** @example 123e4567-e89b-12d3-a456-426614174000 */
            contractId: string;
            /** @example 123e4567-e89b-12d3-a456-426614174000 */
            userId: string;
            /**
             * @example partner
             * @enum {string}
             */
            role: "owner" | "partner" | "viewer";
            /** @example read,write,share */
            permissions?: string;
        };
        ContractUser: {
            /** @example 123e4567-e89b-12d3-a456-426614174000 */
            id: string;
            /** @example 123e4567-e89b-12d3-a456-426614174000 */
            contractId: string;
            /** @example 123e4567-e89b-12d3-a456-426614174000 */
            userId: string;
            /**
             * @example partner
             * @enum {string}
             */
            role: "owner" | "partner" | "viewer";
            /** @example 2023-10-01T00:00:00.000Z */
            sharedAt: string;
            /** @example read,write,share */
            permissions: string;
        };
        Contract: {
            /** @example 123e4567-e89b-12d3-a456-426614174000 */
            id: string;
            /** @example 2023-10-01T00:00:00.000Z */
            createdAt: string;
            /** @example Contract Name */
            name: string;
            /**
             * @example SOLAR
             * @enum {string|null}
             */
            energySourceType: "SOLAR" | "WIND" | "HYDRO" | "THERMAL" | "BIO" | null;
            /** @example 123e4567-e89b-12d3-a456-426614174000 */
            providerId: string;
            /** @example ES1234567890123456 */
            contractCode: string;
            /**
             * @example CONSUMPTION
             * @enum {string}
             */
            contractType: "CONSUMPTION" | "GENERATION";
            /** @example 100 */
            contractPower: number | null;
            /**
             * @example Active
             * @enum {string}
             */
            state: "Active" | "Inactive";
            /** @example 123 Main St, Anytown, USA */
            fullAddress: string;
            /** @example 123e4567-e89b-12d3-a456-426614174000 */
            userId: string;
            /** @example [
             *       "123e4567-e89b-12d3-a456-426614174000"
             *     ] */
            communityContracts: string[];
            /** @example [
             *       "123e4567-e89b-12d3-a456-426614174000"
             *     ] */
            contractsCommunitiesRequests: string[];
            /** @example [
             *       "123e4567-e89b-12d3-a456-426614174000"
             *     ] */
            dataSources: string[];
            /** @example 73400963Z */
            userVat: string;
        };
        ContractUserEnriched: {
            /** @example 123e4567-e89b-12d3-a456-426614174000 */
            id: string;
            /** @example 123e4567-e89b-12d3-a456-426614174000 */
            contractId: string;
            /** @example 123e4567-e89b-12d3-a456-426614174000 */
            userId: string;
            /**
             * @example partner
             * @enum {string}
             */
            role: "owner" | "partner" | "viewer";
            /** @example 2023-10-01T00:00:00.000Z */
            sharedAt: string;
            /** @example read,write,share */
            permissions: string;
            contract: components["schemas"]["Contract"];
            user: components["schemas"]["UserResponse"];
        };
        UpdateContractUserDto: {
            /**
             * @example partner
             * @enum {string}
             */
            role?: "owner" | "partner" | "viewer";
            /** @example read,write,share */
            permissions?: string;
        };
        EnergyProvider: {
            /** @example 123e4567-e89b-12d3-a456-426614174000 */
            id: string;
            /** @example Iberdrola */
            name: string;
            /** @example iberdrola */
            code: string;
            /** @example B1231231 */
            vat: string;
        };
        SharingDto: {
            /** @example 550e8400-e29b-41d4-a716-446655440000 */
            id: string;
            /** @example 50 */
            share: number;
            /** @example 01956d21-fd08-77fa-b18b-fa55eaa97fd3 */
            versionId: string;
            /** @example 01956d21-fd08-77fa-b18b-fa55eaa97fd3 */
            communityContractId: string;
        };
        CreateSharingVersionDto: {
            /** @example 550e8400-e29b-41d4-a716-446655440000 */
            id: string;
            /** @example V.1.0 */
            name: string;
            /** @example true */
            isProductionVersion: boolean;
            /** @example 01956d21-fd08-77fa-b18b-fa55eaa97fd3 */
            communityId: string;
            /** @example [
             *       {
             *         "communityContractId": "01956d21-fd08-77fa-b18b-fa55eaa97fd3",
             *         "share": 0.5,
             *         "versionId": "01956d21-fd08-77fa-b18b-fa55eaa97fd3",
             *         "id": "550e8400-e29b-41d4-a716-446655440000"
             *       }
             *     ] */
            sharings: components["schemas"]["SharingDto"][];
        };
        SharingVersion: {
            /** @example 01956d02-39dd-731b-91e6-c502a7f31e47 */
            id: string;
            /** @example v1.0 */
            name: string;
            /** @example true */
            isProductionVersion: boolean;
            /**
             * Format: date-time
             * @example 2023-01-01T00:00:00Z
             */
            createdDate: string;
            /**
             * Format: date-time
             * @example 2023-01-02T00:00:00Z
             */
            updatedDate: string;
            /** @example 01956d21-fd08-77fa-b18b-fa55eaa97fd3 */
            communityId: string;
        };
        UpdateSharingVersionDto: {
            /** @example [
             *       {
             *         "communityContractId": "01956d21-fd08-77fa-b18b-fa55eaa97fd3",
             *         "share": 0.5,
             *         "versionId": "01956d21-fd08-77fa-b18b-fa55eaa97fd3",
             *         "id": "550e8400-e29b-41d4-a716-446655440000"
             *       }
             *     ] */
            sharings: components["schemas"]["SharingDto"][];
        };
        Sharing: {
            /** @example 01956d02-39dd-731b-91e6-c502a7f31e47 */
            id: string;
            /** @example 50 */
            share: number;
            /** @example v1.0 */
            versionId: string;
            /** @example cc123456 */
            communityContractId: string;
            /**
             * Format: date-time
             * @example 2023-01-01T00:00:00Z
             */
            createdDate: string;
            /**
             * Format: date-time
             * @example 2023-01-02T00:00:00Z
             */
            updatedDate: string;
        };
        ContractDto: {
            /** @example 550e8400-e29b-41d4-a716-446655440000 */
            id: string;
            /** @example 2023-01-01T00:00:00.000Z */
            createdAt: string;
            /** @example Oficina Commenergy */
            name: string;
            /** @example 550e8400-e29b-41d4-a716-446655440000 */
            providerId: string;
            /** @example ES0021000000000000AA */
            contractCode: string;
            /**
             * @example CONSUMPTION
             * @enum {string}
             */
            contractType: "CONSUMPTION" | "GENERATION";
            /**
             * @description Contract power in kW
             * @example 10
             */
            contractPower?: number;
            /**
             * @example Active
             * @enum {string}
             */
            state: "Active" | "Inactive";
            /** @example Carrer de la Marina, 16 */
            fullAddress: string;
            /** @example [] */
            communityContracts: string[];
            /**
             * @example SOLAR
             * @enum {string|null}
             */
            energySourceType: "SOLAR" | "WIND" | "HYDRO" | "THERMAL" | "BIO" | null;
            /** @example [] */
            contractsCommunitiesRequests: string[];
            /** @example [] */
            dataSources: string[];
            /** @example 73400963Z */
            userVat: string;
        };
        ContractEnriched: {
            /** @example 123e4567-e89b-12d3-a456-426614174000 */
            id: string;
            /** @example 2023-10-01T00:00:00.000Z */
            createdAt: string;
            /** @example Contract Name */
            name: string;
            /**
             * @example SOLAR
             * @enum {string|null}
             */
            energySourceType: "SOLAR" | "WIND" | "HYDRO" | "THERMAL" | "BIO" | null;
            /** @example 123e4567-e89b-12d3-a456-426614174000 */
            providerId: string;
            /** @example ES1234567890123456 */
            contractCode: string;
            /**
             * @example CONSUMPTION
             * @enum {string}
             */
            contractType: "CONSUMPTION" | "GENERATION";
            /** @example 100 */
            contractPower: number | null;
            /**
             * @example Active
             * @enum {string}
             */
            state: "Active" | "Inactive";
            /** @example 123 Main St, Anytown, USA */
            fullAddress: string;
            /** @example 123e4567-e89b-12d3-a456-426614174000 */
            userId: string;
            /** @example [
             *       "123e4567-e89b-12d3-a456-426614174000"
             *     ] */
            communityContracts: string[];
            /** @example [
             *       "123e4567-e89b-12d3-a456-426614174000"
             *     ] */
            contractsCommunitiesRequests: string[];
            /** @example [
             *       "123e4567-e89b-12d3-a456-426614174000"
             *     ] */
            dataSources: string[];
            /** @example 73400963Z */
            userVat: string;
            /** @example 123e4567-e89b-12d3-a456-426614174000 */
            user: components["schemas"]["UserResponse"];
            /** @example 123e4567-e89b-12d3-a456-426614174000 */
            provider: components["schemas"]["EnergyProvider"];
        };
        CommunityContractDto: {
            /** @example 550e8400-e29b-41d4-a716-446655440000 */
            id: string;
            /** @example 550e8400-e29b-41d4-a716-446655440000 */
            contractId: string;
            /** @example 550e8400-e29b-41d4-a716-446655440000 */
            communityId: string;
            /** @example 2023-01-01 */
            communityJoinDate?: Record<string, never> | null;
            /**
             * @description Community fee amount
             * @example 50
             */
            communityFee?: Record<string, never> | null;
            /** @enum {string|null} */
            communityFeePeriodType?: "Monthly" | "Quarterly" | "Semiannually" | "Yearly" | null;
            /** @example I agree to the terms and conditions */
            sharingIds: string[];
        };
        CommunityContract: {
            /**
             * Format: uuid
             * @example c6cd7b7a-f7a2-4e38-8e06-27649a84c727
             */
            id: string;
            /**
             * Format: uuid
             * @example c6cd7b7a-f7a2-4e38-8e06-27649a84c727
             */
            contractId: string;
            /**
             * Format: uuid
             * @example c6cd7b7a-f7a2-4e38-8e06-27649a84c727
             */
            communityId: string;
            /** @example 2023-03-23T10:00:00.000Z */
            communityJoinDate: string | null;
            /**
             * @description Community fee amount
             * @example 100
             */
            communityFee: number | null;
            /**
             * @example Monthly
             * @enum {string|null}
             */
            communityFeePeriodType: "Monthly" | "Quarterly" | "Semiannually" | "Yearly" | null;
            /** @example Terms and conditions agreement text */
            termsAgreement: string | null;
            /** @example Shares of the contract with the community and different versions */
            sharingIds: unknown[] | null;
        };
        SharingEnriched: {
            /** @example 01956d02-39dd-731b-91e6-c502a7f31e47 */
            id: string;
            /** @example 50 */
            share: number;
            /** @example v1.0 */
            versionId: string;
            /** @example cc123456 */
            communityContractId: string;
            /**
             * Format: date-time
             * @example 2023-01-01T00:00:00Z
             */
            createdDate: string;
            /**
             * Format: date-time
             * @example 2023-01-02T00:00:00Z
             */
            updatedDate: string;
            /** @example {
             *       "totalUsed": 100,
             *       "totalCapacity": 200,
             *       "totalUsedPercentage": 0.5
             *     } */
            version: components["schemas"]["SharingVersion"];
        };
        CommunityUser: {
            /**
             * Format: uuid
             * @description User ID
             * @example c6cd7b7a-f7a2-4e38-8e06-27649a84c727
             */
            userId: string;
            /**
             * Format: uuid
             * @description Community ID
             * @example c6cd7b7a-f7a2-4e38-8e06-27649a84c727
             */
            communityId: string;
            /**
             * @description User role in the community
             * @example admin
             * @enum {string}
             */
            role: "admin" | "user" | "partner";
            /**
             * @description User VAT number
             * @example ES12345678A
             */
            vat: string;
            /**
             * @description User name
             * @example John Doe
             */
            name?: Record<string, never>;
            /**
             * @description User email
             * @example user@example.com
             */
            email?: Record<string, never>;
            /**
             * @description User mobile phone
             * @example +34600123456
             */
            mobile?: Record<string, never>;
        };
        Community: {
            /**
             * Format: uuid
             * @example c6cd7b7a-f7a2-4e38-8e06-27649a84c727
             */
            id: string;
            /** @example CEL CommEnergy */
            name: string;
            /** @example Commenergy is a placeholder community description */
            description: string;
            /** @example Calle de la Ciencia, 1, 28040 Madrid, España */
            address: string;
            /** @example 2023-03-23T10:00:00.000Z */
            createdAt: string;
            /**
             * @example ACTIVE
             * @enum {string}
             */
            status: "PENDING_TO_BE_CONSTITUTED" | "CONSTITUTED" | "ACTIVE" | "INACTIVE";
            /** @example [
             *       {
             *         "userId": "c6cd7b7a-f7a2-4e38-8e06-27649a84c727",
             *         "communityId": "c6cd7b7a-f7a2-4e38-8e06-27649a84c727",
             *         "role": "admin"
             *       }
             *     ] */
            users: components["schemas"]["CommunityUser"][];
            /**
             * Format: string
             * @description Location code
             * @example ES123123123123123123123123
             */
            locationCode: Record<string, never>;
            /**
             * @description Array of legal document ids
             * @example [
             *       "c6cd7b7a-f7a2-4e38-8e06-27649a84c727",
             *       "c12d7b7a-f7a2-4e38-8e06-27649a84c727"
             *     ]
             */
            legalDocuments: string[];
            /**
             * @description Array of community contract ids
             * @example [
             *       "c6cd7b7a-f7a2-4e38-8e06-27649a84c727",
             *       "c12d7b7a-f7a2-4e38-8e06-27649a84c727"
             *     ]
             */
            communityContracts: string[];
        };
        CommunityContractEnriched: {
            /**
             * Format: uuid
             * @example c6cd7b7a-f7a2-4e38-8e06-27649a84c727
             */
            id: string;
            /** @example {
             *       "id": "c6cd7b7a-f7a2-4e38-8e06-27649a84c727",
             *       "createdAt": "2023-10-01T00:00:00.000Z",
             *       "name": "Contract Name",
             *       "provider": "Provider Name",
             *       "contractCode": "ES1234567890123456",
             *       "contractType": "CONSUMPTION",
             *       "contractPower": 100,
             *       "state": "Active",
             *       "fullAddress": "123 Main St, Anytown, USA",
             *       "user": {
             *         "id": "123e4567-e89b-12d3-a456-426614174000",
             *         "vat": "ES12345678A",
             *         "mobile": "+34600123456",
             *         "email": "user@email.com",
             *         "name": "John Doe"
             *       },
             *       "communityContracts": [],
             *       "contractsCommunitiesRequests": [],
             *       "dataSources": []
             *     } */
            contract: components["schemas"]["ContractEnriched"];
            /**
             * Format: uuid
             * @example c6cd7b7a-f7a2-4e38-8e06-27649a84c727
             */
            communityId: string;
            /** @example 2023-03-23T10:00:00.000Z */
            communityJoinDate: string | null;
            /**
             * @description Community fee amount
             * @example 100
             */
            communityFee: number | null;
            /**
             * @example Monthly
             * @enum {string|null}
             */
            communityFeePeriodType: "Monthly" | "Quarterly" | "Semiannually" | "Yearly" | null;
            /** @example Terms and conditions agreement text */
            termsAgreement: string | null;
            /** @example Share ids of the contract with the community and different versions */
            sharingIds: unknown[] | null;
            /** @example Shares of the contract with the community and different versions */
            sharing: components["schemas"]["SharingEnriched"] | null;
            /** @example {
             *       "id": "c6cd7b7a-f7a2-4e38-8e06-27649a84c727",
             *       "name": "Community Name",
             *       "description": "Description of the community",
             *       "createdAt": "2023-01-01T00:00:00.000Z",
             *       "membersCount": 10
             *     } */
            community: components["schemas"]["Community"] | null;
        };
        CreateCommunityDto: {
            /**
             * Format: uuid
             * @example c6cd7b7a-f7a2-4e38-8e06-27649a84c727
             */
            id: string;
            /** @example CEL CommEnergy */
            name: string;
            /**
             * Format: string
             * @example Calle de la Ciencia, 1, 28040 Madrid
             */
            address: Record<string, never>;
            /** @example Commenergy is a placeholder community description */
            description: string;
            /** @example 100 */
            power: number;
            /**
             * @example ACTIVE
             * @enum {string}
             */
            status: "PENDING_TO_BE_CONSTITUTED" | "CONSTITUTED" | "ACTIVE" | "INACTIVE";
            /** @example ES123123123123123123FF123 */
            locationCode: string;
        };
        CommunityCapacity: {
            /**
             * @description Total generation power in kW
             * @example 100
             */
            totalGenerationPower: number;
            /**
             * @description Total used capacity in kW
             * @example 100
             */
            totalUsed: number;
            /**
             * @description Total capacity in kW
             * @example 200
             */
            totalCapacity: number;
            /**
             * @description Total used capacity percentage
             * @example 0.5
             */
            totalUsedPercentage: number;
        };
        CommunityEnriched: {
            /**
             * Format: uuid
             * @example c6cd7b7a-f7a2-4e38-8e06-27649a84c727
             */
            id: string;
            /** @example CEL CommEnergy */
            name: string;
            /** @example Commenergy is a placeholder community description */
            description: string;
            /** @example Calle de la Ciencia, 1, 28040 Madrid, España */
            address: string;
            /** @example 2023-03-23T10:00:00.000Z */
            createdAt: string;
            /**
             * @example ACTIVE
             * @enum {string}
             */
            status: "PENDING_TO_BE_CONSTITUTED" | "CONSTITUTED" | "ACTIVE" | "INACTIVE";
            /** @example [
             *       {
             *         "userId": "c6cd7b7a-f7a2-4e38-8e06-27649a84c727",
             *         "communityId": "c6cd7b7a-f7a2-4e38-8e06-27649a84c727",
             *         "role": "admin"
             *       }
             *     ] */
            users: components["schemas"]["CommunityUser"][];
            /**
             * Format: string
             * @description Location code
             * @example ES123123123123123123123123
             */
            locationCode: Record<string, never>;
            /**
             * @description Array of legal document ids
             * @example [
             *       "c6cd7b7a-f7a2-4e38-8e06-27649a84c727",
             *       "c12d7b7a-f7a2-4e38-8e06-27649a84c727"
             *     ]
             */
            legalDocuments: string[];
            /**
             * @description Array of community contract ids
             * @example [
             *       "c6cd7b7a-f7a2-4e38-8e06-27649a84c727",
             *       "c12d7b7a-f7a2-4e38-8e06-27649a84c727"
             *     ]
             */
            communityContracts: string[];
            /** @example {
             *       "totalGenerationPower": 100,
             *       "totalUsed": 100,
             *       "totalCapacity": 200,
             *       "totalUsedPercentage": 0.5
             *     } */
            capacity: components["schemas"]["CommunityCapacity"];
        };
        UpdateCommunityDto: {
            /**
             * Format: uuid
             * @example c6cd7b7a-f7a2-4e38-8e06-27649a84c727
             */
            id: string;
            /** @example CEL CommEnergy */
            name: string;
            /**
             * Format: string
             * @example Calle de la Ciencia, 1, 28040 Madrid
             */
            address: Record<string, never>;
            /** @example Commenergy is a placeholder community description */
            description: string;
            /** @example 100 */
            power: number;
            /**
             * @example ACTIVE
             * @enum {string}
             */
            status: "PENDING_TO_BE_CONSTITUTED" | "CONSTITUTED" | "ACTIVE" | "INACTIVE";
            /** @example ES123123123123123123FF123 */
            locationCode: string;
        };
        PatchCommunityDto: {
            /**
             * Format: uuid
             * @example c6cd7b7a-f7a2-4e38-8e06-27649a84c727
             */
            id?: string;
            /** @example CEL CommEnergy */
            name?: string;
            /**
             * Format: string
             * @example Calle de la Ciencia, 1, 28040 Madrid
             */
            address?: Record<string, never>;
            /** @example Commenergy is a placeholder community description */
            description?: string;
            /** @example 100 */
            power?: number;
            /**
             * @example ACTIVE
             * @enum {string}
             */
            status?: "PENDING_TO_BE_CONSTITUTED" | "CONSTITUTED" | "ACTIVE" | "INACTIVE";
            /** @example ES123123123123123123FF123 */
            locationCode?: string;
        };
        UpdateCommunityUserRoleDto: {
            /**
             * @description User role in the community
             * @example user
             * @enum {string}
             */
            role: "admin" | "user" | "partner";
        };
        CreateNewUserCommunityDto: {
            /**
             * Format: uuid
             * @description User ID
             * @example c6cd7b7a-f7a2-4e38-8e06-27649a84c727
             */
            userId?: string;
            /**
             * @description User role in the community
             * @default user
             * @example user
             * @enum {string}
             */
            role: "admin" | "user" | "partner";
            /**
             * @description User VAT number
             * @example ES12345678A
             */
            vat: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    DataSourcesController_getDataSourceTypes: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Data source types retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example SHELLY_CLOUD */
                        type?: string;
                        /** @example Shelly Cloud Integration */
                        name?: string;
                        /** @example Connect to Shelly Cloud API to retrieve device data */
                        description?: string;
                    }[];
                };
            };
            /** @description Unauthorized - Invalid or missing JWT token */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    DataSourcesController_getAllConfigurations: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Data source configurations retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>[];
                };
            };
            /** @description Unauthorized - Invalid or missing JWT token */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    DataSourcesController_getConfigurationByType: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The data source type */
                type: "DATA_DIS" | "SHELLY_CLOUD";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Data source configuration retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Unauthorized - Invalid or missing JWT token */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Data source type not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    DataSourcesController_createDataSource: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateDataSourceDto"];
            };
        };
        responses: {
            /** @description Data source created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DataSourceResponseDto"];
                };
            };
            /** @description Bad request - Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - Invalid or missing JWT token */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    DataSourcesController_getDataSourcesByContract: {
        parameters: {
            query?: {
                /** @description Page number for pagination */
                page?: number;
                /** @description Number of items per page */
                limit?: number;
            };
            header?: never;
            path: {
                /** @description The ID of the contract */
                contractId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Data sources retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DataSourceResponseDto"][];
                };
            };
            /** @description Unauthorized - Invalid or missing JWT token */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Contract not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    DataSourcesController_getDataSourceById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the data source */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Data source retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DataSourceResponseDto"];
                };
            };
            /** @description Unauthorized - Invalid or missing JWT token */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Data source not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    DataSourcesController_updateDataSource: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the data source to update */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateDataSourceDto"];
            };
        };
        responses: {
            /** @description Data source updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DataSourceResponseDto"];
                };
            };
            /** @description Bad request - Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - Invalid or missing JWT token */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Data source not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    DataSourcesController_deleteDataSource: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the data source to delete */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Data source deleted successfully */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - Invalid or missing JWT token */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Data source not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    DocumentsController_createDocument: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": {
                    /** Format: binary */
                    file?: string;
                };
            };
        };
        responses: {
            /** @description The document has been successfully uploaded. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Document"];
                };
            };
        };
    };
    DocumentsController_deleteDocument: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The document has been successfully deleted. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TermsAgreementsController_getAllTermsAgreements: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved all terms agreements. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TermsAgreementDto"][];
                };
            };
        };
    };
    TermsAgreementsController_createTermsAgreement: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TermsAgreementDto"];
            };
        };
        responses: {
            /** @description Successfully created a new terms agreement. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TermsAgreementDto"];
                };
            };
        };
    };
    TermsAgreementsController_getTermsAgreementById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved the terms agreement by ID. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TermsAgreementDto"];
                };
            };
        };
    };
    TermsAgreementsController_getTermsAgreementByCommunityContractId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                communityContractId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved the terms agreement by community contract ID. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TermsAgreementDto"];
                };
            };
            /** @description Terms agreement not found for the community contract. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    HealthController_run: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UsersController_getUsers: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The user has been successfully created. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"][];
                };
            };
        };
    };
    UsersController_register: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateUserDto"];
            };
        };
        responses: {
            /** @description The user has been successfully created. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
    UsersController_registerPending: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreatePendingUserDto"];
            };
        };
        responses: {
            /** @description The pending user has been successfully created. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
    UsersController_getUserByVat: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                vat: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved the user by VAT. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResponse"];
                };
            };
        };
    };
    UsersController_me: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved the user by ID. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResponse"];
                };
            };
        };
    };
    AuthController_run: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_requestPasswordReset: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_confirmPasswordReset: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_testEmail: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ContractUsersController_getContractUsers: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of contract user relationships retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContractUser"][];
                };
            };
        };
    };
    ContractUsersController_createContractUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateContractUserDto"];
            };
        };
        responses: {
            /** @description Contract user relationship created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContractUser"];
                };
            };
            /** @description Contract user relationship already exists */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ContractUsersController_getContractUserById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Contract user relationship ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Contract user relationship retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContractUser"];
                };
            };
            /** @description Contract user relationship not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ContractUsersController_deleteContractUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Contract user relationship ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Contract user relationship deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Contract user relationship not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ContractUsersController_updateContractUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Contract user relationship ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateContractUserDto"];
            };
        };
        responses: {
            /** @description Contract user relationship updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContractUser"];
                };
            };
            /** @description Contract user relationship not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ContractUsersController_getContractUsersByContractId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Contract ID */
                contractId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Contract users retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContractUserEnriched"][];
                };
            };
        };
    };
    ContractUsersController_getContractUsersByUserId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description User ID */
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User contracts retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContractUser"][];
                };
            };
        };
    };
    EnergyProviderController_getEnergyProvidersReq: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Energy providers */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EnergyProvider"][];
                };
            };
        };
    };
    SharingVersionsController_createVersionBulk: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateSharingVersionDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SharingVersion"];
                };
            };
        };
    };
    SharingVersionsController_getVersionsByCommunityId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                communityId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown[];
                };
            };
        };
    };
    SharingVersionsController_deleteSharingVersion: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                sharingVersionId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    SharingVersionsController_updateSharingVersion: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                sharingVersionId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateSharingVersionDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    SharingVersionsController_setSharingVersionProduction: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                sharingVersionId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    SharingsController_createCommunityContract: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SharingDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Sharing"];
                };
            };
        };
    };
    SharingsController_getSharingsById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                communityContractId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Sharing"];
                };
            };
        };
    };
    SharingsController_updateSharing: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                sharingId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SharingDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Sharing"];
                };
            };
        };
    };
    ContractsController_getContracts: {
        parameters: {
            query: {
                ownerType: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of contracts. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"][];
                };
            };
        };
    };
    ContractsController_createContract: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ContractDto"];
            };
        };
        responses: {
            /** @description The contract has been successfully created. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Contract"];
                };
            };
        };
    };
    ContractsController_getContract: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Contract */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContractEnriched"][];
                };
            };
        };
    };
    ContractsController_deleteContract: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The contract has been successfully deleted. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ContractsController_updateContract: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ContractDto"];
            };
        };
        responses: {
            /** @description Update contract */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContractEnriched"];
                };
            };
        };
    };
    ContractsController_getCommunityContractsByContractId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Community contracts for the specified contract. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"][];
                };
            };
        };
    };
    CommunityContractsController_getCommunityContracts: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                communityId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CommunityContractEnriched"][];
                };
            };
        };
    };
    CommunityContractsController_createCommunityContract: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                communityId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CommunityContractDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CommunityContract"];
                };
            };
        };
    };
    CommunityContractsController_getCommunityContract: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                communityId: string;
                communityContractId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CommunityContractEnriched"];
                };
            };
        };
    };
    CommunityContractsController_updateContract: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                communityId: string;
                communityContractId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CommunityContractDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CommunityContract"];
                };
            };
        };
    };
    CommunityContractsController_deleteContract: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                communityId: string;
                communityContractId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CommunityContractsController_getTermsAgreementByCommunityContractId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                communityContractId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved the terms agreement for the community contract */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TermsAgreementDto"];
                };
            };
            /** @description Terms agreement not found for the community contract */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CommunityContractDocumentsController_addDocumentToCommunityContract: {
        parameters: {
            query: {
                relatedDocumentId: string;
            };
            header?: never;
            path: {
                communityContractId: string;
                /** @description Document ID to assign to the uploaded file */
                documentId: string;
                /** @description Community ID */
                id: unknown;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": {
                    /**
                     * Format: binary
                     * @description The file to upload
                     */
                    file: string;
                };
            };
        };
        responses: {
            /** @description Document successfully uploaded and associated with the community */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Document"];
                };
            };
            /** @description No file selected to upload */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Error uploading the document */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CommunityContractDocumentsController_getCommunityContractDocuments: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                communityContractId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"];
                };
            };
        };
    };
    CommunitiesController_getUsersCommunities: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CommunityEnriched"][];
                };
            };
        };
    };
    CommunitiesController_updateCommunity: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateCommunityDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CommunityEnriched"];
                };
            };
        };
    };
    CommunitiesController_createCommunity: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateCommunityDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Community"];
                };
            };
        };
    };
    CommunitiesController_getCommunity: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CommunityEnriched"];
                };
            };
        };
    };
    CommunitiesController_deleteCommunity: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CommunitiesController_patchCommunity: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PatchCommunityDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CommunityEnriched"];
                };
            };
        };
    };
    CommunitiesRequestsController_getUserRequests: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CommunitiesRequestsController_createUserRequestCommunity: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CommunitiesRequestsController_acceptUserRequest: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CommunitiesRequestsController_getContractRequests: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CommunitiesRequestsController_requestToAddContractToCommunity: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CommunitiesRequestsController_AcceptRequestContractToCommunity: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                communityId: string;
                contractId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CommunitiesDocumentsController_addDocumentToCommunity: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                communityId: string;
                /** @description Document ID to assign to the uploaded file */
                documentId: string;
                /** @description Community ID */
                id: unknown;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": {
                    /**
                     * Format: binary
                     * @description The file to upload
                     */
                    file: string;
                };
            };
        };
        responses: {
            /** @description Document successfully uploaded and associated with the community */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Document"];
                };
            };
            /** @description Unauthorized - Invalid or missing JWT token */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No file selected to upload */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Error uploading the document */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CommunitiesDocumentsController_getCommunityDocuments: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Community ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved community documents */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Document"][];
                };
            };
            /** @description Unauthorized - Invalid or missing JWT token */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Community not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Error retrieving community documents */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CommunitiesDocumentsController_deleteCommunityDocument: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Community ID */
                id: string;
                /** @description Document ID to delete */
                documentId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Document successfully deleted from the community */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - Invalid or missing JWT token */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Document or community not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Error deleting the document */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CommunitiesUsersController_getCommunityUsers: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Community ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved community users */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CommunityUser"][];
                };
            };
            /** @description Unauthorized - Invalid or missing JWT token */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CommunitiesUsersController_createNewUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Community ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateNewUserCommunityDto"];
            };
        };
        responses: {
            /** @description User successfully created and added to community */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CommunityUser"];
                };
            };
            /** @description Unauthorized - Invalid or missing JWT token */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CommunitiesUsersController_updateUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Community ID */
                id: string;
                /** @description User ID to update */
                userId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateCommunityUserRoleDto"];
            };
        };
        responses: {
            /** @description User role successfully updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CommunityUser"];
                };
            };
            /** @description Unauthorized - Invalid or missing JWT token */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CommunitiesUsersController_deleteUserFromCommunity: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Community ID */
                id: string;
                /** @description User ID to remove */
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User successfully removed from community */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - Invalid or missing JWT token */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    BulkImportsController_processBulkImport: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Community ID where the bulk import will be processed */
                communityId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": {
                    /**
                     * Format: binary
                     * @description CSV file containing bulk import data
                     */
                    file: string;
                    /** @description Import options (optional) */
                    options?: Record<string, never>;
                };
            };
        };
        responses: {
            /** @description Bulk import processed successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No file selected to upload or invalid file format */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Error processing bulk import */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    BulkImportsController_downloadTemplate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description CSV template file downloaded successfully */
            200: {
                headers: {
                    /** @description MIME type of the response */
                    "Content-Type"?: string;
                    /** @description File attachment header */
                    "Content-Disposition"?: string;
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    BulkImportsController_downloadDocumentedTemplate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    BulkImportsController_downloadMinimalTemplate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    BulkImportsController_downloadTemplateWithDescriptions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    BulkImportsController_getImportHistory: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Community ID to get import history for */
                communityId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Import history retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
